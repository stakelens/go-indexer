// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const cacheFetchLogsRange = `-- name: CacheFetchLogsRange :exec
INSERT INTO fetch_logs_range_cache (id, data) VALUES (?, ?)
`

type CacheFetchLogsRangeParams struct {
	ID   string
	Data string
}

func (q *Queries) CacheFetchLogsRange(ctx context.Context, arg CacheFetchLogsRangeParams) error {
	_, err := q.db.ExecContext(ctx, cacheFetchLogsRange, arg.ID, arg.Data)
	return err
}

const getAllRocketPoolTVLs = `-- name: GetAllRocketPoolTVLs :many
SELECT id, eth_locked, rpl_locked, block_number FROM rocketpool_tvl ORDER BY block_number DESC
`

func (q *Queries) GetAllRocketPoolTVLs(ctx context.Context) ([]RocketpoolTvl, error) {
	rows, err := q.db.QueryContext(ctx, getAllRocketPoolTVLs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RocketpoolTvl
	for rows.Next() {
		var i RocketpoolTvl
		if err := rows.Scan(
			&i.ID,
			&i.EthLocked,
			&i.RplLocked,
			&i.BlockNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCachedFetchLogsRange = `-- name: GetCachedFetchLogsRange :one
SELECT id, data FROM fetch_logs_range_cache WHERE id = ?
`

func (q *Queries) GetCachedFetchLogsRange(ctx context.Context, id string) (FetchLogsRangeCache, error) {
	row := q.db.QueryRowContext(ctx, getCachedFetchLogsRange, id)
	var i FetchLogsRangeCache
	err := row.Scan(&i.ID, &i.Data)
	return i, err
}

const saveRocketPoolTVL = `-- name: SaveRocketPoolTVL :exec
INSERT INTO rocketpool_tvl (eth_locked, rpl_locked, block_number) VALUES (?, ?, ?)
`

type SaveRocketPoolTVLParams struct {
	EthLocked   string
	RplLocked   string
	BlockNumber sql.NullInt64
}

func (q *Queries) SaveRocketPoolTVL(ctx context.Context, arg SaveRocketPoolTVLParams) error {
	_, err := q.db.ExecContext(ctx, saveRocketPoolTVL, arg.EthLocked, arg.RplLocked, arg.BlockNumber)
	return err
}
