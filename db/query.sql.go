// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const cache = `-- name: Cache :exec
INSERT INTO cache (id, data) VALUES ($1, $2)
`

type CacheParams struct {
	ID   string
	Data string
}

func (q *Queries) Cache(ctx context.Context, arg CacheParams) error {
	_, err := q.db.Exec(ctx, cache, arg.ID, arg.Data)
	return err
}

const getAllRocketPoolTVLs = `-- name: GetAllRocketPoolTVLs :many
SELECT id, eth_locked, rpl_locked, block_number FROM rocketpool_tvl ORDER BY block_number DESC
`

func (q *Queries) GetAllRocketPoolTVLs(ctx context.Context) ([]RocketpoolTvl, error) {
	rows, err := q.db.Query(ctx, getAllRocketPoolTVLs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RocketpoolTvl
	for rows.Next() {
		var i RocketpoolTvl
		if err := rows.Scan(
			&i.ID,
			&i.EthLocked,
			&i.RplLocked,
			&i.BlockNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCache = `-- name: GetCache :one
SELECT id, data FROM cache WHERE id = $1
`

func (q *Queries) GetCache(ctx context.Context, id string) (Cache, error) {
	row := q.db.QueryRow(ctx, getCache, id)
	var i Cache
	err := row.Scan(&i.ID, &i.Data)
	return i, err
}

const getLatestBlockRocketPoolTVL = `-- name: GetLatestBlockRocketPoolTVL :one
SELECT id, eth_locked, rpl_locked, block_number FROM rocketpool_tvl ORDER BY block_number DESC LIMIT 1
`

func (q *Queries) GetLatestBlockRocketPoolTVL(ctx context.Context) (RocketpoolTvl, error) {
	row := q.db.QueryRow(ctx, getLatestBlockRocketPoolTVL)
	var i RocketpoolTvl
	err := row.Scan(
		&i.ID,
		&i.EthLocked,
		&i.RplLocked,
		&i.BlockNumber,
	)
	return i, err
}

const saveRocketPoolTVL = `-- name: SaveRocketPoolTVL :exec
INSERT INTO rocketpool_tvl (eth_locked, rpl_locked, block_number) VALUES ($1, $2, $3)
`

type SaveRocketPoolTVLParams struct {
	EthLocked   string
	RplLocked   string
	BlockNumber pgtype.Int8
}

func (q *Queries) SaveRocketPoolTVL(ctx context.Context, arg SaveRocketPoolTVLParams) error {
	_, err := q.db.Exec(ctx, saveRocketPoolTVL, arg.EthLocked, arg.RplLocked, arg.BlockNumber)
	return err
}
